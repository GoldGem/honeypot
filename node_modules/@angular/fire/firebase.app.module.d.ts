import { InjectionToken } from '@angular/core';
import { app, auth, database, firestore, functions, messaging, storage } from 'firebase/app';
import * as ɵngcc0 from '@angular/core';
export declare type FirebaseOptions = {
    [key: string]: any;
};
export declare type FirebaseAppConfig = {
    [key: string]: any;
};
export declare const FirebaseOptionsToken: InjectionToken<FirebaseOptions>;
export declare const FirebaseNameOrConfigToken: InjectionToken<string | FirebaseAppConfig | undefined>;
export declare type FirebaseDatabase = database.Database;
export declare type FirebaseAuth = auth.Auth;
export declare type FirebaseMessaging = messaging.Messaging;
export declare type FirebaseStorage = storage.Storage;
export declare type FirebaseFirestore = firestore.Firestore;
export declare type FirebaseFunctions = functions.Functions;
export declare class FirebaseApp implements app.App {
    name: string;
    options: {};
    auth: () => FirebaseAuth;
    database: (databaseURL?: string) => FirebaseDatabase;
    messaging: () => FirebaseMessaging;
    storage: (storageBucket?: string) => FirebaseStorage;
    delete: () => Promise<void>;
    firestore: () => FirebaseFirestore;
    functions: (region?: string) => FirebaseFunctions;

  analytics(): firebase.analytics.Analytics;

  installations(): firebase.installations.Installations;

  performance(): firebase.performance.Performance;

  remoteConfig(): firebase.remoteConfig.RemoteConfig;
}
export declare function _firebaseAppFactory(options: FirebaseOptions, nameOrConfig?: string | FirebaseAppConfig): FirebaseApp;
export declare class AngularFireModule {
    static initializeApp(options: FirebaseOptions, nameOrConfig?: string | FirebaseAppConfig): ({
        ngModule: typeof AngularFireModule;
        providers: {
            provide: InjectionToken<string | FirebaseAppConfig | undefined>;
            useValue: string | FirebaseAppConfig | undefined;
        }[];
    })&{ngModule:AngularFireModule};
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<AngularFireModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<AngularFireModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZWJhc2UuYXBwLm1vZHVsZS5kLnRzIiwic291cmNlcyI6WyJmaXJlYmFzZS5hcHAubW9kdWxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7K0ZBMkIrRjs7Ozs7O21DQU0xRjs7O0FBQ0wiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYXBwLCBhdXRoLCBkYXRhYmFzZSwgZmlyZXN0b3JlLCBmdW5jdGlvbnMsIG1lc3NhZ2luZywgc3RvcmFnZSB9IGZyb20gJ2ZpcmViYXNlL2FwcCc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlT3B0aW9ucyA9IHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59O1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBGaXJlYmFzZUFwcENvbmZpZyA9IHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgRmlyZWJhc2VPcHRpb25zVG9rZW46IEluamVjdGlvblRva2VuPEZpcmViYXNlT3B0aW9ucz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBGaXJlYmFzZU5hbWVPckNvbmZpZ1Rva2VuOiBJbmplY3Rpb25Ub2tlbjxzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyB8IHVuZGVmaW5lZD47XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlRGF0YWJhc2UgPSBkYXRhYmFzZS5EYXRhYmFzZTtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRmlyZWJhc2VBdXRoID0gYXV0aC5BdXRoO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBGaXJlYmFzZU1lc3NhZ2luZyA9IG1lc3NhZ2luZy5NZXNzYWdpbmc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIEZpcmViYXNlU3RvcmFnZSA9IHN0b3JhZ2UuU3RvcmFnZTtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRmlyZWJhc2VGaXJlc3RvcmUgPSBmaXJlc3RvcmUuRmlyZXN0b3JlO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBGaXJlYmFzZUZ1bmN0aW9ucyA9IGZ1bmN0aW9ucy5GdW5jdGlvbnM7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGaXJlYmFzZUFwcCBpbXBsZW1lbnRzIGFwcC5BcHAge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBvcHRpb25zOiB7fTtcbiAgICBhdXRoOiAoKSA9PiBGaXJlYmFzZUF1dGg7XG4gICAgZGF0YWJhc2U6IChkYXRhYmFzZVVSTD86IHN0cmluZykgPT4gRmlyZWJhc2VEYXRhYmFzZTtcbiAgICBtZXNzYWdpbmc6ICgpID0+IEZpcmViYXNlTWVzc2FnaW5nO1xuICAgIHN0b3JhZ2U6IChzdG9yYWdlQnVja2V0Pzogc3RyaW5nKSA9PiBGaXJlYmFzZVN0b3JhZ2U7XG4gICAgZGVsZXRlOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgIGZpcmVzdG9yZTogKCkgPT4gRmlyZWJhc2VGaXJlc3RvcmU7XG4gICAgZnVuY3Rpb25zOiAocmVnaW9uPzogc3RyaW5nKSA9PiBGaXJlYmFzZUZ1bmN0aW9ucztcbn1cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIF9maXJlYmFzZUFwcEZhY3Rvcnkob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCBuYW1lT3JDb25maWc/OiBzdHJpbmcgfCBGaXJlYmFzZUFwcENvbmZpZyk6IEZpcmViYXNlQXBwO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQW5ndWxhckZpcmVNb2R1bGUge1xuICAgIHN0YXRpYyBpbml0aWFsaXplQXBwKG9wdGlvbnM6IEZpcmViYXNlT3B0aW9ucywgbmFtZU9yQ29uZmlnPzogc3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcpOiB7XG4gICAgICAgIG5nTW9kdWxlOiB0eXBlb2YgQW5ndWxhckZpcmVNb2R1bGU7XG4gICAgICAgIHByb3ZpZGVyczoge1xuICAgICAgICAgICAgcHJvdmlkZTogSW5qZWN0aW9uVG9rZW48c3RyaW5nIHwgRmlyZWJhc2VBcHBDb25maWcgfCB1bmRlZmluZWQ+O1xuICAgICAgICAgICAgdXNlVmFsdWU6IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgdW5kZWZpbmVkO1xuICAgICAgICB9W107XG4gICAgfTtcbn1cbiJdfQ==
