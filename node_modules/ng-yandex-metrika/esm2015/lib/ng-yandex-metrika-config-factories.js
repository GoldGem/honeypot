/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { YandexCounterConfig } from './ng-yandex-metrika.config';
/**
 * @param {?} counterConfigs
 * @param {?=} defaultCounter
 * @return {?}
 */
export function defaultCounterIdFactory(counterConfigs, defaultCounter) {
    return defineDefaultId(counterConfigs, defaultCounter);
}
/**
 * @param {?} counterConfigs
 * @param {?=} defaultCounter
 * @return {?}
 */
export function defineDefaultId(counterConfigs, defaultCounter) {
    /** @type {?} */
    let configs;
    if (counterConfigs instanceof Array) {
        configs = counterConfigs;
    }
    else {
        configs = [(/** @type {?} */ (counterConfigs))];
    }
    /** @type {?} */
    let defaultId;
    if (!defaultCounter) {
        defaultId = configs[0].id;
    }
    else if (typeof defaultCounter === 'number' && defaultCounter < configs.length) {
        defaultId = configs[defaultCounter].id;
    }
    else {
        defaultId = defaultCounter;
    }
    if (!defaultId) {
        console.warn('You provided wrong counter id as a default:', defaultCounter);
        return;
    }
    /** @type {?} */
    let defaultCounterExists = false;
    /** @type {?} */
    let config;
    for (let i = 0; i < configs.length; i++) {
        config = configs[i];
        if (!config.id) {
            console.warn('You should provide counter id to use Yandex metrika counter', config);
            continue;
        }
        if (config.id === defaultId) {
            defaultCounterExists = true;
        }
    }
    if (!defaultCounterExists) {
        console.warn('You provided wrong counter id as a default:', defaultCounter);
    }
    return defaultId;
}
/**
 * @param {?} configs
 * @return {?}
 */
export function countersFactory(configs) {
    return createConfigs(configs);
}
/**
 * @param {?} configs
 * @return {?}
 */
export function createConfigs(configs) {
    /** @type {?} */
    let counterConfigs;
    if (configs instanceof Array) {
        counterConfigs = configs;
    }
    else {
        counterConfigs = [(/** @type {?} */ (configs))];
    }
    return counterConfigs.map((/**
     * @param {?} config
     * @return {?}
     */
    (config) => Object.assign(new YandexCounterConfig(), config)));
}
/**
 * @param {?} counterConfigs
 * @param {?} platformId
 * @return {?}
 */
export function appInitializerFactory(counterConfigs, platformId) {
    if (isPlatformBrowser(platformId)) {
        return insertMetrika.bind(null, counterConfigs);
    }
    return (/**
     * @return {?}
     */
    () => 'none');
}
/**
 * @param {?} counterConfigs
 * @return {?}
 */
export function insertMetrika(counterConfigs) {
    /** @type {?} */
    const name = 'yandex_metrika_callbacks2';
    window[name] = window[name] || [];
    window[name].push((/**
     * @return {?}
     */
    () => {
        try {
            for (const config of counterConfigs) {
                createCounter(config);
            }
        }
        catch (e) { }
    }));
    /** @type {?} */
    const n = document.getElementsByTagName('script')[0];
    /** @type {?} */
    const s = document.createElement('script');
    s.type = 'text/javascript';
    s.async = true;
    /** @type {?} */
    const alternative = counterConfigs.find((/**
     * @param {?} config
     * @return {?}
     */
    config => config.alternative));
    if (alternative) {
        s.src = 'https://cdn.jsdelivr.net/npm/yandex-metrica-watch/tag.js';
    }
    else {
        s.src = 'https://mc.yandex.ru/metrika/tag.js';
    }
    /** @type {?} */
    const insetScriptTag = (/**
     * @return {?}
     */
    () => n.parentNode.insertBefore(s, n));
    if (((/** @type {?} */ (window))).opera === '[object Opera]') {
        document.addEventListener('DOMContentLoaded', insetScriptTag, false);
    }
    else {
        insetScriptTag();
    }
    return name;
}
/**
 * @param {?} config
 * @return {?}
 */
export function createCounter(config) {
    window[getCounterNameById(config.id)] = new Ya.Metrika2(config);
}
/**
 * @param {?} id
 * @return {?}
 */
export function getCounterNameById(id) {
    return `yaCounter${id}`;
}
//# sourceMappingURL=data:application/json;base64,