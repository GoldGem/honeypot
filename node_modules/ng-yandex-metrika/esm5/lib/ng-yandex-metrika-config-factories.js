/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isPlatformBrowser } from '@angular/common';
import { YandexCounterConfig } from './ng-yandex-metrika.config';
/**
 * @param {?} counterConfigs
 * @param {?=} defaultCounter
 * @return {?}
 */
export function defaultCounterIdFactory(counterConfigs, defaultCounter) {
    return defineDefaultId(counterConfigs, defaultCounter);
}
/**
 * @param {?} counterConfigs
 * @param {?=} defaultCounter
 * @return {?}
 */
export function defineDefaultId(counterConfigs, defaultCounter) {
    /** @type {?} */
    var configs;
    if (counterConfigs instanceof Array) {
        configs = counterConfigs;
    }
    else {
        configs = [(/** @type {?} */ (counterConfigs))];
    }
    /** @type {?} */
    var defaultId;
    if (!defaultCounter) {
        defaultId = configs[0].id;
    }
    else if (typeof defaultCounter === 'number' && defaultCounter < configs.length) {
        defaultId = configs[defaultCounter].id;
    }
    else {
        defaultId = defaultCounter;
    }
    if (!defaultId) {
        console.warn('You provided wrong counter id as a default:', defaultCounter);
        return;
    }
    /** @type {?} */
    var defaultCounterExists = false;
    /** @type {?} */
    var config;
    for (var i = 0; i < configs.length; i++) {
        config = configs[i];
        if (!config.id) {
            console.warn('You should provide counter id to use Yandex metrika counter', config);
            continue;
        }
        if (config.id === defaultId) {
            defaultCounterExists = true;
        }
    }
    if (!defaultCounterExists) {
        console.warn('You provided wrong counter id as a default:', defaultCounter);
    }
    return defaultId;
}
/**
 * @param {?} configs
 * @return {?}
 */
export function countersFactory(configs) {
    return createConfigs(configs);
}
/**
 * @param {?} configs
 * @return {?}
 */
export function createConfigs(configs) {
    /** @type {?} */
    var counterConfigs;
    if (configs instanceof Array) {
        counterConfigs = configs;
    }
    else {
        counterConfigs = [(/** @type {?} */ (configs))];
    }
    return counterConfigs.map((/**
     * @param {?} config
     * @return {?}
     */
    function (config) { return Object.assign(new YandexCounterConfig(), config); }));
}
/**
 * @param {?} counterConfigs
 * @param {?} platformId
 * @return {?}
 */
export function appInitializerFactory(counterConfigs, platformId) {
    if (isPlatformBrowser(platformId)) {
        return insertMetrika.bind(null, counterConfigs);
    }
    return (/**
     * @return {?}
     */
    function () { return 'none'; });
}
/**
 * @param {?} counterConfigs
 * @return {?}
 */
export function insertMetrika(counterConfigs) {
    /** @type {?} */
    var name = 'yandex_metrika_callbacks2';
    window[name] = window[name] || [];
    window[name].push((/**
     * @return {?}
     */
    function () {
        var e_1, _a;
        try {
            try {
                for (var counterConfigs_1 = tslib_1.__values(counterConfigs), counterConfigs_1_1 = counterConfigs_1.next(); !counterConfigs_1_1.done; counterConfigs_1_1 = counterConfigs_1.next()) {
                    var config = counterConfigs_1_1.value;
                    createCounter(config);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (counterConfigs_1_1 && !counterConfigs_1_1.done && (_a = counterConfigs_1.return)) _a.call(counterConfigs_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        catch (e) { }
    }));
    /** @type {?} */
    var n = document.getElementsByTagName('script')[0];
    /** @type {?} */
    var s = document.createElement('script');
    s.type = 'text/javascript';
    s.async = true;
    /** @type {?} */
    var alternative = counterConfigs.find((/**
     * @param {?} config
     * @return {?}
     */
    function (config) { return config.alternative; }));
    if (alternative) {
        s.src = 'https://cdn.jsdelivr.net/npm/yandex-metrica-watch/tag.js';
    }
    else {
        s.src = 'https://mc.yandex.ru/metrika/tag.js';
    }
    /** @type {?} */
    var insetScriptTag = (/**
     * @return {?}
     */
    function () { return n.parentNode.insertBefore(s, n); });
    if (((/** @type {?} */ (window))).opera === '[object Opera]') {
        document.addEventListener('DOMContentLoaded', insetScriptTag, false);
    }
    else {
        insetScriptTag();
    }
    return name;
}
/**
 * @param {?} config
 * @return {?}
 */
export function createCounter(config) {
    window[getCounterNameById(config.id)] = new Ya.Metrika2(config);
}
/**
 * @param {?} id
 * @return {?}
 */
export function getCounterNameById(id) {
    return "yaCounter" + id;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcteWFuZGV4LW1ldHJpa2EtY29uZmlnLWZhY3Rvcmllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXlhbmRleC1tZXRyaWthLyIsInNvdXJjZXMiOlsibGliL25nLXlhbmRleC1tZXRyaWthLWNvbmZpZy1mYWN0b3JpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsaUJBQWlCLEVBQW9CLE1BQU0saUJBQWlCLENBQUM7QUFFdEUsT0FBTyxFQUFpQixtQkFBbUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7Ozs7QUFFaEYsTUFBTSxVQUFVLHVCQUF1QixDQUFDLGNBQStDLEVBQUUsY0FBZ0M7SUFDdkgsT0FBTyxlQUFlLENBQUMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ3pELENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsY0FBK0MsRUFBRSxjQUFnQzs7UUFDM0csT0FBd0I7SUFDNUIsSUFBSSxjQUFjLFlBQVksS0FBSyxFQUFFO1FBQ25DLE9BQU8sR0FBRyxjQUFjLENBQUM7S0FDMUI7U0FBTTtRQUNMLE9BQU8sR0FBRyxDQUFDLG1CQUFBLGNBQWMsRUFBaUIsQ0FBQyxDQUFDO0tBQzdDOztRQUNHLFNBQTBCO0lBRTlCLElBQUksQ0FBQyxjQUFjLEVBQUU7UUFDbkIsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDM0I7U0FBTSxJQUFJLE9BQU8sY0FBYyxLQUFLLFFBQVEsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUNoRixTQUFTLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztLQUN4QztTQUFNO1FBQ0wsU0FBUyxHQUFHLGNBQWMsQ0FBQztLQUM1QjtJQUVELElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQzVFLE9B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Y0FBYzs7O0lBQUcsY0FBTSxPQUFBLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBL0IsQ0FBK0IsQ0FBQTtJQUU1RCxJQUFJLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxLQUFLLEtBQUssZ0JBQWdCLEVBQUU7UUFDOUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUN0RTtTQUFNO1FBQ0wsY0FBYyxFQUFFLENBQUM7S0FDbEI7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxNQUEyQjtJQUN2RCxNQUFNLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xFLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLEVBQW1CO0lBQ3BELE9BQU8sY0FBWSxFQUFJLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgdmFyIFlhOiBhbnk7XG5cbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyLCBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQ291bnRlckNvbmZpZywgWWFuZGV4Q291bnRlckNvbmZpZyB9IGZyb20gJy4vbmcteWFuZGV4LW1ldHJpa2EuY29uZmlnJztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb3VudGVySWRGYWN0b3J5KGNvdW50ZXJDb25maWdzOiBDb3VudGVyQ29uZmlnIHwgQ291bnRlckNvbmZpZ1tdLCBkZWZhdWx0Q291bnRlcj86IG51bWJlciB8IHN0cmluZykge1xuICByZXR1cm4gZGVmaW5lRGVmYXVsdElkKGNvdW50ZXJDb25maWdzLCBkZWZhdWx0Q291bnRlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVEZWZhdWx0SWQoY291bnRlckNvbmZpZ3M6IENvdW50ZXJDb25maWcgfCBDb3VudGVyQ29uZmlnW10sIGRlZmF1bHRDb3VudGVyPzogbnVtYmVyIHwgc3RyaW5nKSB7XG4gIGxldCBjb25maWdzOiBDb3VudGVyQ29uZmlnW107XG4gIGlmIChjb3VudGVyQ29uZmlncyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgY29uZmlncyA9IGNvdW50ZXJDb25maWdzO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZ3MgPSBbY291bnRlckNvbmZpZ3MgYXMgQ291bnRlckNvbmZpZ107XG4gIH1cbiAgbGV0IGRlZmF1bHRJZDogbnVtYmVyIHwgc3RyaW5nO1xuXG4gIGlmICghZGVmYXVsdENvdW50ZXIpIHtcbiAgICBkZWZhdWx0SWQgPSBjb25maWdzWzBdLmlkO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZhdWx0Q291bnRlciA9PT0gJ251bWJlcicgJiYgZGVmYXVsdENvdW50ZXIgPCBjb25maWdzLmxlbmd0aCkge1xuICAgIGRlZmF1bHRJZCA9IGNvbmZpZ3NbZGVmYXVsdENvdW50ZXJdLmlkO1xuICB9IGVsc2Uge1xuICAgIGRlZmF1bHRJZCA9IGRlZmF1bHRDb3VudGVyO1xuICB9XG5cbiAgaWYgKCFkZWZhdWx0SWQpIHtcbiAgICBjb25zb2xlLndhcm4oJ1lvdSBwcm92aWRlZCB3cm9uZyBjb3VudGVyIGlkIGFzIGEgZGVmYXVsdDonLCBkZWZhdWx0Q291bnRlcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGRlZmF1bHRDb3VudGVyRXhpc3RzID0gZmFsc2U7XG4gIGxldCBjb25maWc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbmZpZyA9IGNvbmZpZ3NbaV07XG4gICAgaWYgKCFjb25maWcuaWQpIHtcbiAgICAgIGNvbnNvbGUud2FybignWW91IHNob3VsZCBwcm92aWRlIGNvdW50ZXIgaWQgdG8gdXNlIFlhbmRleCBtZXRyaWthIGNvdW50ZXInLCBjb25maWcpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjb25maWcuaWQgPT09IGRlZmF1bHRJZCkge1xuICAgICAgZGVmYXVsdENvdW50ZXJFeGlzdHMgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghZGVmYXVsdENvdW50ZXJFeGlzdHMpIHtcbiAgICBjb25zb2xlLndhcm4oJ1lvdSBwcm92aWRlZCB3cm9uZyBjb3VudGVyIGlkIGFzIGEgZGVmYXVsdDonLCBkZWZhdWx0Q291bnRlcik7XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRJZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50ZXJzRmFjdG9yeShjb25maWdzOiBDb3VudGVyQ29uZmlnIHwgQ291bnRlckNvbmZpZ1tdKSB7XG4gIHJldHVybiBjcmVhdGVDb25maWdzKGNvbmZpZ3MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29uZmlncyhjb25maWdzOiBDb3VudGVyQ29uZmlnIHwgQ291bnRlckNvbmZpZ1tdKSB7XG4gIGxldCBjb3VudGVyQ29uZmlnczogQ291bnRlckNvbmZpZ1tdO1xuICBpZiAoY29uZmlncyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgY291bnRlckNvbmZpZ3MgPSBjb25maWdzO1xuICB9IGVsc2Uge1xuICAgIGNvdW50ZXJDb25maWdzID0gW2NvbmZpZ3MgYXMgQ291bnRlckNvbmZpZ107XG4gIH1cbiAgcmV0dXJuIGNvdW50ZXJDb25maWdzLm1hcCgoY29uZmlnOiBDb3VudGVyQ29uZmlnKSA9PiBPYmplY3QuYXNzaWduKG5ldyBZYW5kZXhDb3VudGVyQ29uZmlnKCksIGNvbmZpZykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwSW5pdGlhbGl6ZXJGYWN0b3J5KGNvdW50ZXJDb25maWdzOiBZYW5kZXhDb3VudGVyQ29uZmlnW10sIHBsYXRmb3JtSWQ6IGFueSkge1xuICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCkpIHtcbiAgICByZXR1cm4gaW5zZXJ0TWV0cmlrYS5iaW5kKG51bGwsIGNvdW50ZXJDb25maWdzKTtcbiAgfVxuXG4gIHJldHVybiAoKSA9PiAnbm9uZSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnNlcnRNZXRyaWthKGNvdW50ZXJDb25maWdzOiBZYW5kZXhDb3VudGVyQ29uZmlnW10pIHtcbiAgY29uc3QgbmFtZSA9ICd5YW5kZXhfbWV0cmlrYV9jYWxsYmFja3MyJztcbiAgd2luZG93W25hbWVdID0gd2luZG93W25hbWVdIHx8IFtdO1xuICB3aW5kb3dbbmFtZV0ucHVzaCgoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAoY29uc3QgY29uZmlnIG9mIGNvdW50ZXJDb25maWdzKSB7XG4gICAgICAgIGNyZWF0ZUNvdW50ZXIoY29uZmlnKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KTtcblxuICBjb25zdCBuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICBjb25zdCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gIHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICBzLmFzeW5jID0gdHJ1ZTtcblxuICBjb25zdCBhbHRlcm5hdGl2ZSA9IGNvdW50ZXJDb25maWdzLmZpbmQoY29uZmlnID0+IGNvbmZpZy5hbHRlcm5hdGl2ZSk7XG5cbiAgaWYgKGFsdGVybmF0aXZlKSB7XG4gICAgcy5zcmMgPSAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS95YW5kZXgtbWV0cmljYS13YXRjaC90YWcuanMnO1xuICB9IGVsc2Uge1xuICAgIHMuc3JjID0gJ2h0dHBzOi8vbWMueWFuZGV4LnJ1L21ldHJpa2EvdGFnLmpzJztcbiAgfVxuXG4gIGNvbnN0IGluc2V0U2NyaXB0VGFnID0gKCkgPT4gbi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzLCBuKTtcblxuICBpZiAoKHdpbmRvdyBhcyBhbnkpLm9wZXJhID09PSAnW29iamVjdCBPcGVyYV0nKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluc2V0U2NyaXB0VGFnLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgaW5zZXRTY3JpcHRUYWcoKTtcbiAgfVxuICByZXR1cm4gbmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvdW50ZXIoY29uZmlnOiBZYW5kZXhDb3VudGVyQ29uZmlnKSB7XG4gIHdpbmRvd1tnZXRDb3VudGVyTmFtZUJ5SWQoY29uZmlnLmlkKV0gPSBuZXcgWWEuTWV0cmlrYTIoY29uZmlnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvdW50ZXJOYW1lQnlJZChpZDogc3RyaW5nIHwgbnVtYmVyKSB7XG4gIHJldHVybiBgeWFDb3VudGVyJHtpZH1gO1xufVxuIl19